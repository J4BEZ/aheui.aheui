밯빠박발따투바푸마부삿붏우차뿌붛처붇ㅇㅇㅇㅇㅇㅇ오어ㅇ여ㅇ여ㅇ여ㅇ여ㅇ여ㅇ여
쏭벅썽버머차뽀자초쑹봆술밤야뱖야조야ㅇ쌵ㅇ뱌ㅇ쌵ㅇ모ㅇㅇ희ㅇㅇㅇㅇㅇㅇㅇㅇㅇ <<<<- dup
또두벌떠벎벎벓벓벓부봄붒밦죠뷹볽뼈볾차봃ㅇㅇㅇㅇㅇ모ㅇㅇ추댜뎌다퍄쵸희ㅇㅇ요 <<<- a2_try*
됴따따따탸부뻐따뿌쑹손붏투벎자추토요ㅇ볎ㅇㅇㅇㅇㅇ추ㅇㅇ밤볽복뻐처모ㅇㅇㅇㅇ
뵭범머차뺘져밣볼뚜부보뚜뾰초저뺘볾밦죠초ㅇㅇㅇㅇ붏뻐아쌰챠샤뱍푸슈아야먀처요
됴뱕초뚜져떠벍터범쌍숙박투빠뵥자초요버별ㅇㅇㅇㅇ투뚀아추오박셜부툐범ㅇㅇㅇ모처뭏
또봄뻐라빠밞쟈뿌차붊뵤뱍쀼북ㅇ볾쀼뼈러죠뗘벍범머차빠뷱박삱초썰푸벅ㅇㅇㅇㅇ요오여
또뿌처뮤져벅뻐처뮤타뿌표벅북쟈벌야요츄ㅇㅇㅇ받밤따툐숄차숁쌀보붐댜뾰처먀류초뚜벎
또밤쟈뮤차빠발주뷱버붊뵥초북붐뻐처봉빠뵳ㅇㅇ뽀뻐너떠불뽀뿌터더벍봄희뱕범또펴툐요
볽벍마뷰챠뿌뿌쳐븀모쥬솑머숭쟈뾰처뵥오마뱛뱜퍄뱛타슈뚜솟밣탸쀼처먀모처펴뺘뮤차뵫
볽밝뚜벽조벍밣쥬투벋밞타쀼뿌마밤뷹탸먀추마모마밣푸뵭타초뱍쀼떠야뾰야랴야뱍야뷷요
뱍뵴벋어여더여터여ㅇ초부머쓔추따뉴타추빠밤타추푸터볻서무아먀챠초오수써뻐섯몽뗘벅
뵴탸보오밣볾며차마뵥뿌뱍추뷸빠붐뗘뵫뻐투벍불뻐밣파타포붐료슛뱜퍼뱕투뚀ㅇㅇㅇ타포
묘처모져툐벅뇨벼뵤머차뿌뿌사뾰뵭뿌뵥쟈뼈초아탸묘차마요밝또싾희퍼썮뻐
뵫뵥버볽밤주뼈처무져븀볃북뜌모퍼받붉뿌터뺘뿌처마마먀복범쑤뻐^moving
쀼처모뽀요쳐뵥묘벽마보챠저쀼추추뼈뚜뵮봃먀뱜먀투밦밤요버사툐
요조여어오여여여뗘여볌여버텨푸아포루자초모불뻐처마무봆바붐며
뷹뿌자쳐주먀볌볻뼈토쳐저모볃무요뻐쑨봃빠추탸무차먀먀요뵴여
요뵶볼뻐처마바받밝또상썅텨뺘벽싸소산뽀뱍뻐튜먀먀먀먀뵴박봄묘
쟈무차뿌튜벅처마삭파빠싸파송빠쑹챠썽뻐성써마마마밣밤요머처모
요벅주벎빠쌍쳐상쑹싸수뼈쑤뻐순차사뱍송더뽀추탸묘차빠뱞ㅇ토
보머처무송뺘뾰쏘셔뮤ㅇ속슈토뿌빠쑹상쀼뎌속빠봄푸벓
툐벋수벼삭포버숙처속져초저봄쑥오처우차수초터범튜포우어어어어어
파먀쟈퍄초요머여펴벼셕썩보도석초썽뻐쏭뵥삭푸퍄벓토펴ㅇ           우처싹삭
뺘셔쑈쎠샥뼈묘텨범더석퍼썩뻐퍼선샹써뽀텨벅뻐뾰선마손여<-refl     야조샥벼
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

a2_try*:
	; 두번째 인자
	푸		; v {n x _ | x #}
	ㅊ a2_try	; v x
	북		; v x #
	jmp a2_ops

a2_try:			; v n x
	숫		; [S] s
	뿌		; [S] s s
	ㅊ a2_queue	; [S] s
	숝		; [H] <...> # {? _}*
	ㅊ a2_ok	; [H] <...>
	수		; v n x
	푸		; v x n
	쑩		; v x
	숝		; [H] <...> n
	jmp a2_cleanup

a2_ok:			; [H/T] <...> # {? _}* m
	쑤		; [H/T] <...> # {? _}*
	수		; v n x m
	푸		; v n m x
	부		; v n m x _
	jmp a2_ops

a2_queue:		; [S] s
	술		; [T] <...> # {? _}*
	ㅊ a2_ok	; [T] <...>
	북		; [T] <...> #
	숝		; [H] <...> # {? _}*
a2_qarrange:		; [H] <...> # {? _}*
	ㅊ a2_qnext	; [H] <...>
	북		; [H] <...> #
	술		; [T] <...> # {? _}*
	ㅊ a2_ok	; [T] <...>
	수		; v n x
	푸		; v x n
	쑬		; v x
	술		; [T] <...> n

a2_cleanup:		; [H/T] <...> n
	북		; [H/T] <...> n #
	푸		; [H/T] <...> # n
	부		; [H/T] <...> # n _
	수		; v x
	북		; v x #
	jmp a2_ops

a2_qnext:		; [H] <...> # {? _}* ?
	쑬		; [H] <...> # {? _}*
	부		; [H] <...> # {? _}* _
	쑬		; [H] <...> # {? _}*
	jmp a2_qarrange

	; 인자가 둘인 명령
a2_ops:			; v {n m x _ | x #}
	푸		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붐		; v {n m _ | #} x x 4
	투		; v {n m _ | #} x x-4
	ㅊ add		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붒
	붉
	두		; v {n m _ | #} x x 13
	투		; v {n m _ | #} x x-13
	ㅊ cmp		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	불		; v {n m _ | #} x x 5
	투		; v {n m _ | #} x x-5
	ㅊ mul		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붇		; v {n m _ | #} x x 3
	투		; v {n m _ | #} x x-3
	ㅊ div		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붒		; v {n m _ | #} x x 6
	투		; v {n m _ | #} x x-6
	ㅊ mod		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붏
	붊
	두		; v {n m _ | #} x x 17
	투		; v {n m _ | #} x x-17
	ㅊ sub		; v {n m _ | #} x
	뿌		; v {n m _ | #} x x
	붇
	붒
	뚜		; v {n m _ | #} x x 18
	투		; v {n m _ | #} x x-18
	ㅊ swap	; v {n m _ | #} x

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; 없는 명령
	무		; v {n m _ | #}
	ㅊ push2front	; v
	jmp refl

	; 공통 코드: 스택/큐 뒷꽁무니에 하나 넣기
push1back:		; ? val
	쑩		; ?
	부		; ? 0
	쑩		; ?
	무		;
	jmp refl

	; 공통 코드: 스택/큐 앞머리에 둘 넣기
push2front:		; ? n m
	숫		; [S] s
	뿌		; [S] s s
	ㅊ push2frontq	; [S] s
	수		; ? n m
	쑩		; ? n
	부		; ? n 0
	쑩		; ? n
	쑩		; ?
	부		; ? 0
	쑩		; ?
	무		;
	jmp refl

push2frontq:		; [S] s
	수		; v n m
	쑬		; v n
	부		; v n 0
	쑬		; v n
	쑬		; v
	부		; v 0
	쑬		; v
	무		;
	jmp refl

	;; ㅃ 중복
dup:			; v {n _ | #} x
	무		; v {n _ | #}
	ㅊ dup0	; v
	jmp refl

dup0:			; v n
	뿌		; v n n
	jmp push2front

	;; ㄷ 덧셈
add:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ add0	; v
	jmp refl

add0:			; v n m
	두		; v n+m
	jmp push1back

	;; ㅈ 비교
cmp:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ cmp0	; v
	jmp refl

cmp0:			; v n m
	푸		; v m n
	주		; v m>=n
	jmp push1back

	;; ㄸ 곱셈
mul:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ mul0	; v
	jmp refl

mul0:			; v n m
	뚜		; v n*m
	jmp push1back

	;; ㄴ 나눗셈
div:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ div0	; v
	jmp refl

div0:			; v n m
	푸		; v m n
	누		; v m/n
	jmp push1back

	;; ㄹ 나머지
mod:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ mod0	; v
	jmp refl

mod0:			; v n m
	푸		; v m n
	루		; v m/n
	jmp push1back

	;; ㅌ 뺄셈
sub:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ sub0	; v
	jmp refl

sub0:			; v n m
	푸		; v m n
	투		; v m/n
	jmp push1back

	;; ㅍ 바꿔치기
swap:			; v {n m _ | #} x
	무		; v {n m _ | #}
	ㅊ swap0	; v
	jmp refl

swap0:			; v n m
	푸		; v m n
	jmp push2front

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;; ㅅ/ㅆ 공통 코드
moving:			; {n delta -1 | 3 | 2*z}
	숫		; [S] s
	뿌		; [S] s s
	ㅊ m_qarrange	; [S] s
	숞		; [A] delta
	jmp m_forward

	; 큐 재정렬
m_qarrange:		; [S] s
	숞		; [A] delta
	북		; [A] delta #
	숝		; [H] <...> {# {? _}* ? _ | #}
m_qarrange0:		; [H] <...> {# {? _}* ? _ | #}
	ㅊ m_qarrange1	; [H] <...>
	북		; [H] <...> #
	술		; [T] <...> {# {? _}* ? _ | #}
m_qarrange2:		; [T] <...> {# {? _}* ? _ | #}
	ㅊ m_qarrange3	; [T] <...>
	숞		; [A] delta {# {? _}* ? _ | #}
m_qarrange4:		; [A] delta {# {? _}* ? _ | #}
	ㅊ m_qarrange5	; [A] delta
	jmp m_forward

m_qarrange1:		; [H] <...> # {? _}* ?
	쑪		; [H] <...> # {? _}*
	부		; [H] <...> # {? _}* _
	쑪		; [H] <...> # {? _}*
	jmp m_qarrange0

m_qarrange3:		; [T] <...> # {? _}* ?
	쑩		; [T] <...> # {? _}*
	부		; [T] <...> # {? _}* _
	쑩		; [T] <...> # {? _}*
	jmp m_qarrange2

m_qarrange5:		; [A] delta # {? _}* ?
	쑩		; [A] delta # {? _}*
	부		; [A] delta # {? _}* _
	쑩		; [A] delta # {? _}*
	jmp m_qarrange4

	; 앞으로 움직이기
m_forward:		; [A] delta
	뿌		; [A] delta delta
	부		; [A] delta delta 0
	푸		; [A] delta 0 delta
	주		; [A] delta 0>=delta
	ㅊ m_forward0	; [A] delta
	jmp m_backward

m_forward0:		; [A] delta
	숝		; [H] <...>
	북		; [H] <...> #
	술		; [T] <...> {# {? _}* ? _ | #}
m_forward1:		; [T] <...> {# {? _}* ? _ | #}
	ㅊ m_forward2	; [T] <...>
	숞		; [A] delta
	북		; [A] delta 2
	투		; [A] delta-2
	jmp m_forward

m_forward2:		; [T] <...> # {? _}* ?
	쑩		; [T] <...> # {? _}*
	부		; [T] <...> # {? _}* _
	쑩		; [T] <...> # {? _}*
	jmp m_forward1

	; 뒤로 움직이기
m_backward:		; [A] delta
	뿌		; [A] delta delta
	부		; [A] delta delta 0
	주		; [A] delta delta>=0
	ㅊ m_backward0	; [A] delta
	jmp m_next

m_backward0:		; [A] delta
	술		; [T] <...>
	북		; [T] <...> #
	숝		; [H] <...> {# {? _}* ? _ | #}
m_backward1:		; [H] <...> {# {? _}* ? _ | #}
	ㅊ m_backward2	; [H] <...>
	숞		; [A] delta
	북		; [A] delta 2
	두		; [A] delta+2
	jmp m_backward

m_backward2:		; [H] <...> # {? _}* ?
	쑬		; [H] <...> # {? _}*
	부		; [H] <...> # {? _}* _
	쑬		; [H] <...> # {? _}*
	jmp m_backward1

	; 상태 업데이트
m_next:			; [A] delta
	무		; [A]
	수		; {n delta -1 | 3 | 2*z}
	뿌		; {n delta -1 -1 | 3 3 | 2*z 2*z}
	부		; {n delta -1 -1 | 3 3 | 2*z 2*z} 0
	주		; {n delta -1 0 | 3 1 | 2*z 1}
	ㅊ m_redo	; {3 | 2*z}
	쑷		;
	숫		; [S] s {3 | 2*z}
	뿌		; [S] s {3 3 | 2*z 2*z}
	붇		; [S] s {3 3 | 2*z 2*z} 3
	투		; [S] s {3 0 | 2*z 2*z-3}
	ㅊ m_skipupd	; [S] s 2*z
	푸		; [S] 2*z s
m_skipupd:		; [S] s' ?
	무		; [S] s'
	뿌		; [S] s' s'
	ㅊ m_qdone	; [S] s'
	수		;
	jmp refl

m_qdone:		; [S] s'
	북		; [S] s' #
	쑬		; [S] s'
	수		;
	jmp refl

m_redo:			; n delta -1
	무		; n delta
	부		; n delta 0
	푸		; n 0 delta
	투		; n -delta
	쑪		; n
	쑩		;
	부		; 0
	쑩		;
	붇		; 3
	순		; [A] -delta
	jmp m_forward

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 끝

;; vim: ts=8 sts=8 sw=8 noet cc=80
